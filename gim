#!/usr/bin/perl

################################################################################################
### Initialize
################################################################################################
use strict;
use Cwd qw(fastgetcwd realpath);
use File::Basename;
use Git::Repository;
use Sys::Hostname;
use File::Copy;
use Env;

#*** include modules in INC
BEGIN{
   my $base_dir = &File::Basename::dirname(realpath($0));
   push (@INC, $base_dir);
}
use modules::gim qw(read_settings extract_repo_id_from_url msg git_add_commit git_get_origin git_get_status git_add_origin git_push git_pull github_form_url ssh_check_known_host_from_git_url ssh_add_known_host get_ip_from_name);
use modules::aws qw(start_instance);
my $base_dir = &File::Basename::dirname(realpath($0));
my $ini_dir = $ENV{HOME}."/.gim";
my @all_args = @ARGV;
my $key = @all_args[0];
my $cwd = fastgetcwd();

################################################################################################
## Interpret what to do from command line
################################################################################################

if (@all_args == 0) {
    msg("[error] no arguments to gim. Type 'gim help' for usage info.");
    exit;
}
if ($key eq "help") {
    open (TXT, "<".$base_dir."/gim_example_usage.txt");
    while (my $line = <TXT>) {
        print $line;
    }
    close (TXT);
    print "\n";
    exit;
}
my @gim_args = qw/as_remote cmd_prefix force/;
my @sge_cmds = qw/qstat qhost/;
my @gim_cmds = qw/init clone sync status link setup servers tunnel/;
push (@gim_cmds, @sge_cmds);
my @psn_cmds = qw/do_psn execute bootstrap vpc llp/;
my @all_cmd;
#push (@all_cmd, @gim_cmd, @psn_cmd);
my $psn_cmd; my $gim_cmd; my $local = 0; my $loc_id; my $server_id; my @set_args;
my %arg;
$arg{as_remote} = "";
foreach my $arg (@gim_args) {
    if ($key =~ m/^\-/) {
        $key =~ s/^\-//;
        my ($left, $right) = split(/\=/, $key);
        $arg{$left} = $right;
        push (@set_args, $key);
        shift(@all_args);
        $key = @all_args[0];
    }
}

################################################################################################
## Get user info
################################################################################################

my $ini;
if (-e $ini_dir . "/settings.json") {
    $ini = read_settings($ini_dir . "/settings.json");
} else {
    unless ($key eq "setup") {
        msg("no settings file found, please run 'gim setup'", $arg{as_remote});   
        exit;
    }     
}
our @servers = keys (%{$ini -> {servers} });
my $git_remote =  $ini -> {git}; 

################################################################################################
## Decide what to do
################################################################################################

if ( $key ~~ @gim_cmds) { # do a gim command?
    $gim_cmd = $key;
    $local = 1;
#   msg("running gim command ".$key);
} 

if ( $key ~~ @psn_cmds ) { # do a psn command locally ?
    $psn_cmd = $key;
#    msg("running PsN command '".$psn_cmd."' on local machine.");
    $local = 1;
} 
if ( $key ~~ @servers ) { # do a psn command locally ?
    $server_id = $key;
#    msg("running on server (".$server_id.")", $arg{as_remote} );
    $local = 0;
} 
if (!(($key ~~ @gim_cmds )||($key ~~ @psn_cmds)||($key ~~ @servers))) { # not a recognized command
    my $par = shift(@all_args);
    unless ($par =~ m/as_remote/) {
    msg("[error] '".$par."' is not a recognized gim or psn command, nor a defined remote server.", $arg{as_remote});
    exit;
    }
}

if ($key eq "local") {
    $local = 1;
}
unless ($local) {
    $loc_id = shift(@all_args); 
}

if ($gim_cmd eq "servers") {
    foreach (@servers) {
        print $_."\n";
    }
    exit;
}
if ($gim_cmd eq "tunnel") {
    my $user = $ENV{"USER"};
    my $user_local = @all_args[1];
    open (WHO, "who | grep ".$user." |");
    my $host;
    while (my $line = <WHO>) {
	my @inf = split(" ", $line);
	if (@inf[0] eq $user) {
	    $host = pop(@inf);
	    $host =~ s/[\(\)]//g;
	}
    }
    close (WHO);
    if ($host eq "") {
	msg("Tunnel failed, failed to identify connecting host");
    } else {
	system('ssh -4 '.$user_local.'@'.$host.' -L 8001:github.com:22 -N');
    }
    exit;
}

################################################################################################
## Print some info
################################################################################################

if ($arg{as_remote} eq "") {
#     print "\n*** Gim version 0.1 \n";
#     print "*** Jan 2014, RJK \n\n";
#    msg ("defined servers: ".join (" ", @servers), $arg{as_remote});
#    msg ("git account: ".$git_remote -> {url} .":". $git_remote -> {user}, $arg{as_remote});
}

################################################################################################
## Initialize Git repo, save changes if necessary, push to remote
################################################################################################

# unless(exists_in_array($gim_cmd, ["qstat"])) {
    our $cwd = ".";
    my $dir = $cwd;
    unless (-d $dir."/.git") {
	msg ("creating new git repository in current folder.",$arg{as_remote} );
	Git::Repository -> run( 
	    init => $dir,
	    { 
		env => {
		    GIT_COMMITTER_EMAIL => 'ronkeizer@gmail.com',
		    GIT_COMMITTER_NAME  => 'Ron Keizer',
		},
	    } );
    }
    our $r = Git::Repository -> new( 
	work_tree => $dir, { 
            env => {
                GIT_COMMITTER_EMAIL => 'ronkeizer@gmail.com',
                GIT_COMMITTER_NAME  => 'Ron Keizer',
            },
        } );
    if ($r =~ m/HASH/) {
#    	msg("git repository found",$arg{as_remote} );
    } else {
        msg("could not find git repository!",$arg{as_remote} );        
    }
#}
# print join(" ",keys(%$r))."\n";
# print "* gim: Options: ".join(" ",keys(%{$r -> {options}}));

################################################################################################
## Run gim command if specified
################################################################################################

if ($gim_cmd ne "") {
    shift(@all_args);
    if ($gim_cmd =~ m/as_remote/) { # received a request to run a model as remote server
        # my $repo = shift(@all_args);
#        chdir($folder);
        $local = 1;
        if (( @all_args[0] eq "sync")||(@all_args[0] eq "status") ) {
            $gim_cmd = shift(@all_args); 
        } else {
            $gim_cmd = ""; # make sure the psn cmd is run
        }
    	# my ($tmp, $serv) = split(/=/, $gim_cmd);
	    # $arg{as_remote} = $serv;
    } 
    if ($gim_cmd eq "setup") {
        unless (-d $ini_dir) {
            mkdir($ini_dir);
            msg("created gim settings folder (".$ini_dir.")");
        } else {
            msg("gim settings folder found (".$ini_dir.")");    
        }
        if (-e $ini_dir."/settings.json") {
            msg("user settings file found (use 'rm ~/.gim/settings.json' to reset)")            
        } else {
            copy ($base_dir."/settings_template.json", $ini_dir."/settings.json");
            msg("copied template settings file to user folder (".$ini_dir.")");
        }
        msg("opening gim settings file");
        sleep(1);
        my $editor = "nano";
        if ($ENV{EDITOR} ne "") { $editor = $ENV{EDITOR}; }; 
        system($editor." ".$ini_dir."/settings.json");
        msg("done.", $arg{as_remote} );
        exit;
    }
    if ($gim_cmd ~~ @sge_cmds) {
        msg("running jobs: ", $arg{as_remote});
	    system("qstat -s r");
        msg("scheduled jobs: ", $arg{as_remote});
	    system("qstat -s z");
	    exit;
    }
    if ($gim_cmd eq "status") {
        my $serv = shift(@all_args);
        if ($serv eq "") {
            my ($status, $rest) = git_get_status($r, $arg{as_remote});
            my $report_status = $status;
            if ($status =~ m/nothing to commit/) {$report_status = "no changes found"; }
            if ($status =~ m/nothing added to commit but/) {$report_status = "changes found! use 'gim sync [server]' to sync"; }
            my $modified =()= $rest =~ /modified:/gi;
            if ($modified > 0) { 
                $report_status = "changes found: ".$modified." files modified. ";
            }
            if ($rest =~ m/Untracked files:/) {
                $report_status .= "new files found.";
            }
            msg($report_status, $arg{as_remote});
            exit;
        } else {
            my @servers_loop = ($serv);
            if ($serv eq "all") {
                @servers_loop = @servers;
            }
            foreach my $server_id (@servers_loop) {
                msg("connecting to ".$server_id, $arg{as_remote});
                my $ssh_cmd = "ssh";
                my $server = $ini -> {servers} -> {$server_id};
                if ($server -> {key} ne "") {
                  $ssh_cmd .= " -i ".$server -> {key};
                }
                $ssh_cmd .= " ".$server -> {user}. "@" . $server -> {url};
                my $origin = git_get_origin ($r);
                my $repo = extract_repo_id_from_url ($origin -> {origin});
                my $cmd = '"cd '.$server -> {repository_location}.'; mkdir -p '.$repo.'; cd '.$repo.'; '.$server -> {gim_location}.'/gim -as_remote='.$server_id.' status "';
                open (OUT, $ssh_cmd ." ". $cmd . " | ");
                while (my $line = <OUT>) {
                    print $line;
                }
            }
        }
        exit;
    }
    if ($gim_cmd eq "sync") {
        msg ("starting synchronize", $arg{as_remote});
        my $serv = shift(@all_args);
        my @servers_loop = ($serv);
        if ($serv eq "all") {
            @servers_loop = @servers;
        }
        if ($serv eq "") { # local
            my $origin = git_get_origin ($r);
            my $origin_url = $origin -> {origin};
            ssh_check_known_host_from_git_url($origin_url, $arg{as_remote});
            git_pull($r, $arg{as_remote});
            git_add_commit($r, $arg{as_remote});
            git_push($r, $arg{as_remote});
            exit;
        }
        foreach my $server_id (@servers_loop) {
            if ($server_id ne "") {
                msg("connecting to ".$server_id, $arg{as_remote});
                my $ssh_cmd = "ssh";
                my $server = $ini -> {servers} -> {$server_id};
                if ($server -> {key} ne "") {
                  $ssh_cmd .= " -i ".$server -> {key};
                }
                $ssh_cmd .= " ".$server -> {user}. "@" . $server -> {url};
                my $origin = git_get_origin ($r);
                my $repo = extract_repo_id_from_url ($origin -> {origin});
                my $cmd = '"cd '.$server -> {repository_location}.'; mkdir -p '.$repo.'; cd '.$repo.'; '.$server -> {gim_location}.'/gim -as_remote='.$server_id.' sync "';
                open (OUT, $ssh_cmd ." ". $cmd . " | ");
                while (my $line = <OUT>) {
                    print $line;
                }
            }
        }
        if ($arg{as_remote} eq "") {
            git_pull ($r, $arg{as_remote});
        }
        exit;
    }
    if ($gim_cmd eq "link") {
        my $host = shift(@all_args);
        my $repo = shift(@all_args);
        if ($host eq "" || $repo eq "") {
            msg("[error] either host or repository name not specified.", $arg{as_remote} );
            exit;            
        } else {
            $repo =~ s/\s\r\n//g;
            git_add_origin($r, $git_remote, $host, $repo, 0, "");
        }
    }
    if ($gim_cmd ne "") {
        msg("done.",$arg{as_remote} );
        exit;
    }
}

# origin: git@github.com:ronkeizer/test.git

################################################################################################
## Run the PsN command, either locally or send to remote
################################################################################################

if ($gim_cmd eq "") {
    
    ## add files to the repo if new results available
    my $origin = git_get_origin ($r);
    if ($origin -> {origin} eq "") {
        if ($arg{as_remote} ne "") {
            my $folder = fastgetcwd();
            my @dirs = split(/\//, $folder);
            my $repo_id = pop(@dirs);
            git_add_origin($r, $git_remote, $repo_id, 0, $arg{as_remote});
        } else {
            msg("no remote repository specified yet for this project. Please use 'gim link [repo]'",$arg{as_remote} );
            exit;
        }
    }
    my $repo = extract_repo_id_from_url ($origin -> {origin});

# RK: Should we do a pull? probably not, unless you also work in the cloud. Make setting for this.
#    git_pull ($r, $arg{as_remote});
    unless ("qstat" ~~ @all_args) {
    	if ($arg{as_remote} eq "") {
	       git_add_commit ($r, $arg{as_remote});
	       my $status = git_get_status($r, $arg{as_remote});
	       git_push ($r, $arg{as_remote});
	   }   
    }

    my $psn_cmd = join (" ", @all_args);
    if ($ini -> {"psn"} -> {"prefix"} ne "") {
    	$psn_cmd = $ini -> {"psn"} -> {"prefix"} . " " . $psn_cmd;
    }
    if ($local) {
        # msg("running on local machine: ".$psn_cmd."\n",$arg{as_remote} );
        if ($arg{as_remote} ne "") {
            msg("starting PsN (".$psn_cmd.")", $arg{as_remote});
    	    system ('nohup nice '.$psn_cmd.' > foo.out 2> foo.err < /dev/null &');
    	    sleep (1);
        } else {
            open (OUT, $psn_cmd . " | ");
            while (my $line = <OUT>) {
                if ($line =~ m/ITERATION/) {
                    print $line;
                }
            }
            git_add_commit($r, $arg{as_remote});
            # look at status  as well !
            git_push($r, $arg{as_remote});
        }
    } 
    if (!$local) {
#        msg("running on ".$loc_id.": ".$psn_cmd);
        my $ssh_cmd = "ssh";
        my $server = $ini -> {servers} -> {$server_id};
        if ($server -> {key} ne "") {
            $ssh_cmd .= " -i ".$server -> {key};
        }
        $ssh_cmd .= " ".$server -> {user}. "@" . $server -> {url};
        # my $ssh_sh = 'echo \#\!\/bin/sh > ssh.sh; echo exec /usr/bin/ssh -o StrictHostKeyChecking=no "\$@" >> ssh.sh';
        # my $ssh_env = 'export GIT_SSH=\"/root/test/ssh.sh\"';
#        git init; git remote rm origin; git remote add origin '.$origin -> {origin}.'; git pull origin master; '.$psn_cmd.' &"
        my $cmd = '"cd '.$server -> {repository_location}.'; mkdir -p '.$repo.'; cd '.$repo.'; '.$server -> {gim_location}.'/gim -as_remote='.$server_id.' '.$psn_cmd.'"';
       # msg ($ssh_cmd ." ". $cmd);
        open (OUT, $ssh_cmd ." ". $cmd . " | ");
        while (my $line = <OUT>) {
            print $line;
        }
    }
}
# print "\n";
msg("done.", $arg{as_remote});
exit;
