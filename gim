#!/usr/bin/perl

################################################################################################
### Initialize
################################################################################################
use strict;
use Cwd qw(fastgetcwd realpath);
use File::Basename;
use Git::Repository;
use Sys::Hostname;

#*** include modules in INC
BEGIN{
   my $base_dir = &File::Basename::dirname(realpath($0));
   push (@INC, $base_dir);
}
use modules::gim qw(read_settings extract_repo_id_from_url msg git_add_commit git_get_origin git_get_status git_add_origin git_push git_pull github_form_url);
my $base_dir = &File::Basename::dirname(realpath($0));
my @all_args = @ARGV;
my $key = @all_args[0];
my $cwd = fastgetcwd();

################################################################################################
## Get user info
################################################################################################

my $ini = read_settings($base_dir . "/settings.json");
our @servers = keys (%{$ini -> {servers} });
my $git_remote =  $ini -> {git}; 

################################################################################################
## Interpret what to do from command line
################################################################################################

if (@all_args == 0) {
    msg("[error] no arguments to gim.");
    exit;
}
my @gim_cmds = qw/init clone sync status link as_remote/;
my @psn_cmds = qw/execute bootstrap vpc/;
my @all_cmd;
#push (@all_cmd, @gim_cmd, @psn_cmd);
my $psn_cmd; my $gim_cmd; my $local = 0; my $loc_id; my $server_id;
my $as_remote = 0; 
if ( $key ~~ @gim_cmds ) { # do a gim command?
    $gim_cmd = $key;
    $local = 1;
#   msg("running gim command ".$key);
} 
if ($gim_cmd eq "as_remote") {
    $as_remote = 1;
}
if ( $key ~~ @psn_cmds ) { # do a psn command locally ?
    $psn_cmd = $key;
#    msg("running PsN command '".$psn_cmd."' on local machine.");
    $local = 1;
} 
if ( $key ~~ @servers ) { # do a psn command locally ?
    $server_id = $key;
#    msg("running on server (".$server_id.")", $as_remote );
    $local = 0;
} 
if (!(($key ~~ @gim_cmds )||($key ~~ @psn_cmds)||($key ~~ @servers))) { # not a recognized command
    my $par = shift(@all_args);
    msg("[error] '".$par."' is not a recognized gip or psn command, nor a defined cluster.", $as_remote);
    exit;
}

if ($key eq "local") {
    $local = 1;
}
unless ($local) {
    $loc_id = shift(@all_args); 
}

################################################################################################
## Print some info
################################################################################################

if ($as_remote == 0) {
#     print "\n*** Gim version 0.1 \n";
#     print "*** Jan 2014, RJK \n\n";
#    msg ("defined servers: ".join (" ", @servers), $as_remote);
#    msg ("git account: ".$git_remote -> {url} .":". $git_remote -> {user}, $as_remote);
}

################################################################################################
## Initialize Git repo, save changes if necessary, push to remote
################################################################################################

our $cwd = ".";
my $dir = $cwd;
unless (-d $dir."/.git") {
    msg ("creating new git repository in current folder.",$as_remote );
    Git::Repository -> run( 
        init => $dir,
        { 
            env => {
                GIT_COMMITTER_EMAIL => 'ronkeizer@gmail.com',
                GIT_COMMITTER_NAME  => 'Ron Keizer',
            },
        } );
}
our $r = Git::Repository -> new( 
    work_tree => $dir, { 
            env => {
                GIT_COMMITTER_EMAIL => 'ronkeizer@gmail.com',
                GIT_COMMITTER_NAME  => 'Ron Keizer',
            },
        } );
if ($r =~ m/HASH/) {
    msg("connected to local git repository",$as_remote );
}
# print join(" ",keys(%$r))."\n";
# print "* gim: Options: ".join(" ",keys(%{$r -> {options}}));

################################################################################################
## Run gim command if specified
################################################################################################

if ($gim_cmd ne "") {
    shift(@all_args);
    if ($gim_cmd eq "as_remote") { # received a request to run a model as remote server
        # my $repo = shift(@all_args);
#        chdir($folder);
        $local = 1;
        if (( @all_args[0] eq "sync")||(@all_args[0] eq "status") ) {
            $gim_cmd = shift(@all_args); 
        } else {
            $gim_cmd = ""; # make sure the psn cmd is run
        }
        $as_remote = 1;
    } 
    if ($gim_cmd eq "status") {
        my $serv = shift(@all_args);
        if ($serv eq "") {
            my $status = git_get_status($r, $as_remote);
            if ($status =~ m/nothing to commit/) {$status = "no changes found"; }
            if ($status =~ m/nothing added to commit but/) {$status = "changes found! use 'gim sync [server]' to sync"; }
            msg($status, $as_remote);
            exit;
        } else {
            my @servers_loop = ($serv);
            if ($serv eq "all") {
                @servers_loop = @servers;
            }
            foreach my $server_id (@servers_loop) {
                msg("connecting to ".$server_id, $as_remote);
                my $ssh_cmd = "ssh";
                my $server = $ini -> {servers} -> {$server_id};
                if ($server -> {key} ne "") {
                  $ssh_cmd .= " -i ".$server -> {key};
                }
                $ssh_cmd .= " ".$server -> {user}. "@" . $server -> {url};
                my $origin = git_get_origin ($r);
                my $repo = extract_repo_id_from_url ($origin -> {origin});
                my $cmd = '"cd '.$server -> {repository_location}.'; mkdir -p '.$repo.'; cd '.$repo.'; '.$server -> {gim_location}.'/gim as_remote status "';
                open (OUT, $ssh_cmd ." ". $cmd . " | ");
                while (my $line = <OUT>) {
                    print $line;
                }
            }
        }
        exit;
    }
    if ($gim_cmd eq "sync") {
        my $serv = shift(@all_args);
        my @servers_loop = ($serv);
        if ($serv eq "all") {
            @servers_loop = @servers;
        }
        foreach my $server_id (@servers_loop) {
            if ($server_id ne "") {
                msg("connecting to ".$server_id, $as_remote);
                my $ssh_cmd = "ssh";
                my $server = $ini -> {servers} -> {$server_id};
                if ($server -> {key} ne "") {
                  $ssh_cmd .= " -i ".$server -> {key};
                }
                $ssh_cmd .= " ".$server -> {user}. "@" . $server -> {url};
                my $origin = git_get_origin ($r);
                my $repo = extract_repo_id_from_url ($origin -> {origin});
                my $cmd = '"cd '.$server -> {repository_location}.'; mkdir -p '.$repo.'; cd '.$repo.'; '.$server -> {gim_location}.'/gim as_remote sync "';
                open (OUT, $ssh_cmd ." ". $cmd . " | ");
                while (my $line = <OUT>) {
                    print $line;
                }
            }
        }
        if ($as_remote != 1) {
            git_pull ($r, $as_remote);
        }
        exit;
    }
    if ($gim_cmd eq "link") {
        my $repo = shift(@all_args);
        $repo =~ s/\s\r\n//g;
        unless($repo eq "") {
            git_add_origin($r, $git_remote, $repo, 0, 0);
        } else {
            msg("no repo name specified.",$as_remote );
            exit;
        }
    }
    if ($gim_cmd ne "") {
        msg("done.",$as_remote );
        exit;
    }
}

# origin: git@github.com:ronkeizer/test.git

################################################################################################
## Run the PsN command, either locally or send to remote
################################################################################################

if ($gim_cmd eq "") {
    
    ## add files to the repo if new results available
    my $origin = git_get_origin ($r);
    if ($origin -> {origin} eq "") {
        if ($as_remote) {
            my $folder = fastgetcwd();
            my @dirs = split(/\//, $folder);
            my $repo_id = pop(@dirs);
            git_add_origin($r, $git_remote, $repo_id, 0, 1);
        } else {
            msg("no remote repository specified yet for this project. Please use 'gim link [repo]'",$as_remote );
            exit;
        }
    }
    my $repo = extract_repo_id_from_url ($origin -> {origin});

    git_pull ($r, $as_remote);
    if ($as_remote == 0) {
         git_add_commit ($r, $as_remote);
         my $status = git_get_status($r, $as_remote);
#         if ($status =~ m/to be committed/) {
                git_push ($r, $as_remote);
 #        } else {
 #           msg("nothing to push", $as_remote);
 #        }
    }

    my $psn_cmd = join (" ", @all_args);
    if ($local) {
        # msg("running on local machine: ".$psn_cmd."\n",$as_remote );
        if ($as_remote) {
            msg("starting PsN (".$psn_cmd.")", $as_remote);
    	    system ('nohup nice '.$psn_cmd.' > foo.out 2> foo.err < /dev/null &');
    	    sleep (1);
        } else {
            open (OUT, $psn_cmd . " | ");
            while (my $line = <OUT>) {
                if ($line =~ m/ITERATION/) {
                    print $line;
                }
            }
            git_add_commit($r, $as_remote);
            # look at status  as well !
            git_push($r, $as_remote);
        }
    } 
    if (!$local) {
#        msg("running on ".$loc_id.": ".$psn_cmd);
        my $ssh_cmd = "ssh";
        my $server = $ini -> {servers} -> {$server_id};
        if ($server -> {key} ne "") {
            $ssh_cmd .= " -i ".$server -> {key};
        }
        $ssh_cmd .= " ".$server -> {user}. "@" . $server -> {url};
        # my $ssh_sh = 'echo \#\!\/bin/sh > ssh.sh; echo exec /usr/bin/ssh -o StrictHostKeyChecking=no "\$@" >> ssh.sh';
        # my $ssh_env = 'export GIT_SSH=\"/root/test/ssh.sh\"';
#        git init; git remote rm origin; git remote add origin '.$origin -> {origin}.'; git pull origin master; '.$psn_cmd.' &"
        my $cmd = '"cd '.$server -> {repository_location}.'; mkdir -p '.$repo.'; cd '.$repo.'; '.$server -> {gim_location}.'/gim as_remote '.$psn_cmd.'"';
       # msg ($ssh_cmd ." ". $cmd);
        open (OUT, $ssh_cmd ." ". $cmd . " | ");
        while (my $line = <OUT>) {
            print $line;
        }
    }
}
# print "\n";
msg("done.", $as_remote);
exit;
